"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var bigInt = require("big-integer");
var buffer_1 = require("buffer");
var js_sha256_1 = require("js-sha256");
var HEX_CHARS = "0123456789abcdef";
var MAX_INT32 = 0x7fffffff; // Math.pow(2, 31) - 1 (the leading sign bit is 0);
/**
 * Creates an uint32 array by copying and shifting the uint8 of the argument by groups of four.
 * @param uint8Array Its length has to be a multiple of 4
 * @returns {Uint32Array}
 */
function uint8ArrayToUint32Array(uint8Array) {
    var len = uint8Array.length;
    if (len % 4 !== 0) {
        throw new Error("uint8Array.length must be a multiple of 4");
    }
    var uint32Array = new Uint32Array(len / 4);
    for (var i = 0, j = 0; i < len; i += 4, j++) {
        uint32Array[j] += uint8Array[i] * (1 << 0);
        uint32Array[j] += uint8Array[i + 1] * (1 << 8);
        uint32Array[j] += uint8Array[i + 2] * (1 << 16);
        uint32Array[j] += uint8Array[i + 3] * (1 << 24);
    }
    return uint32Array;
}
exports.uint8ArrayToUint32Array = uint8ArrayToUint32Array;
/**
 * Returns a zero-padded (8 chars long) hex-string of the little-endian representation the argument.
 *
 * The relation between the characters of `.toString(16)` (big-endian) is:
 * .toString(16):                <76543210>
 * int32ToLittleEndianHexString: <10325476>
 *
 * Example:
 * .toString(16):                ed81c15a
 * int32ToLittleEndianHexString: 5ac181ed
 *
 * @param int32
 * @returns {string}
 */
function int32ToLittleEndianHexString(int32) {
    var result = "";
    for (var i = 0; i < 4; i++) {
        result = result + HEX_CHARS.charAt((int32 >> i * 8 + 4) & 15);
        result = result + HEX_CHARS.charAt((int32 >> i * 8) & 15);
    }
    return result;
}
exports.int32ToLittleEndianHexString = int32ToLittleEndianHexString;
// tslint:disable-next-line:max-line-length
// https://github.com/Demurgos/skype-web-reversed/blob/fe3931c4f091af06f6b2c2e8c14608aebf87448b/skype/latest/decompiled/fullExperience/rjs%24%24msr-crypto/lib/sha256Auth.js#L62
/**
 * Returns 64 bits (an Uint32 array of length 2) computed from the challengeParts and hashParts.
 * This is retrieved from the source of Skype's web application.
 *
 * See _cS64_C in sha256Auth.js at skype-web-reversed for the original implementation:
 *
 * @param challengeParts
 * @param hashParts An Uint32Array of length 4
 * @returns {null}
 */
function checkSum64(challengeParts, hashParts) {
    if (challengeParts.length < 2 || challengeParts.length % 2 !== 0) {
        throw new Error("Invalid parameters");
    }
    var MAGIC = 0x0e79a9c1; // A magic constant
    var HASH_0 = hashParts[0] & MAX_INT32; // Remove the sign bit
    var HASH_1 = hashParts[1] & MAX_INT32;
    var HASH_2 = hashParts[2] & MAX_INT32;
    var HASH_3 = hashParts[3] & MAX_INT32;
    var low = bigInt.zero; // 0-31 bits of the result
    var high = bigInt.zero; // 32-63 bits of the result
    var temp;
    var len = challengeParts.length;
    for (var i = 0; i < len; i += 2) {
        temp = bigInt(challengeParts[i]).multiply(MAGIC).mod(MAX_INT32);
        low = low.add(temp).multiply(HASH_0).add(HASH_1).mod(MAX_INT32);
        high = high.add(low);
        temp = bigInt(challengeParts[i + 1]);
        low = low.add(temp).multiply(HASH_2).add(HASH_3).mod(MAX_INT32);
        high = high.add(low);
    }
    low = low.add(HASH_1).mod(MAX_INT32);
    high = high.add(HASH_3).mod(MAX_INT32);
    return new Uint32Array([low.toJSNumber(), high.toJSNumber()]);
}
// tslint:disable-next-line:max-line-length
// https://github.com/Demurgos/skype-web-reversed/blob/fe3931c4f091af06f6b2c2e8c14608aebf87448b/skype/latest/decompiled/fullExperience/rjs$$msr-crypto/lib/sha256Auth.js#L48
/**
 * This computes the Hash-based message authentication code (HMAC) of the input buffer by using
 * SHA-256 and the checkSum64 function.
 * This is retrieved from the source of Skype's web application.
 *
 * See getMacHash in sha256Auth.js at skype-web-reversed for the original implementation
 * tslint:disable-next-line:max-line-length
 *
 * @param input
 * @param productId
 * @param productKey
 * @returns {string} An hexadecimal 32-chars long string
 */
function hmacSha256(input, productId, productKey) {
    var message = buffer_1.Buffer.concat([input, productId]);
    // adjust length to be a multiple of 8 with right-padding of character '0'
    if (message.length % 8 !== 0) {
        var fix = 8 - (message.length % 8);
        var padding = buffer_1.Buffer.alloc(fix, "0", "utf8");
        padding.fill("0");
        message = buffer_1.Buffer.concat([message, padding]);
    }
    var challengeParts = uint8ArrayToUint32Array(message);
    var sha256HexString = js_sha256_1.sha256(buffer_1.Buffer.concat([input, productKey]));
    var sha256Buffer = buffer_1.Buffer.from(sha256HexString, "hex");
    // Get half of the sha256 as 4 uint32
    var sha256Parts = uint8ArrayToUint32Array(sha256Buffer.slice(0, 16));
    var checkSumParts = checkSum64(challengeParts, sha256Parts);
    sha256Parts[0] ^= checkSumParts[0];
    sha256Parts[1] ^= checkSumParts[1];
    sha256Parts[2] ^= checkSumParts[0];
    sha256Parts[3] ^= checkSumParts[1];
    return int32ToLittleEndianHexString(sha256Parts[0])
        + int32ToLittleEndianHexString(sha256Parts[1])
        + int32ToLittleEndianHexString(sha256Parts[2])
        + int32ToLittleEndianHexString(sha256Parts[3]);
}
exports.hmacSha256 = hmacSha256;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUMsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNFLElBQU0sWUFBWSxHQUFXLGVBQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRWpFLHFDQUFxQztJQUNyQyxJQUFNLFdBQVcsR0FBZ0IsdUJBQXVCLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUVwRixJQUFNLGFBQWEsR0FBZ0IsVUFBVSxDQUFDLGNBQWMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUUzRSxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25DLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRW5DLE1BQU0sQ0FBQyw0QkFBNEIsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7VUFDL0MsNEJBQTRCLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1VBQzVDLDRCQUE0QixDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztVQUM1Qyw0QkFBNEIsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuRCxDQUFDO0FBN0JELGdDQTZCQyIsImZpbGUiOiJsaWIvdXRpbHMvaG1hYy1zaGEyNTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBiaWdJbnQgZnJvbSBcImJpZy1pbnRlZ2VyXCI7XHJcbmltcG9ydCB7QnVmZmVyfSBmcm9tIFwiYnVmZmVyXCI7XHJcbmltcG9ydCB7c2hhMjU2fSBmcm9tIFwianMtc2hhMjU2XCI7XHJcblxyXG5jb25zdCBIRVhfQ0hBUlM6IHN0cmluZyA9IFwiMDEyMzQ1Njc4OWFiY2RlZlwiO1xyXG5jb25zdCBNQVhfSU5UMzI6IG51bWJlciA9IDB4N2ZmZmZmZmY7IC8vIE1hdGgucG93KDIsIDMxKSAtIDEgKHRoZSBsZWFkaW5nIHNpZ24gYml0IGlzIDApO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYW4gdWludDMyIGFycmF5IGJ5IGNvcHlpbmcgYW5kIHNoaWZ0aW5nIHRoZSB1aW50OCBvZiB0aGUgYXJndW1lbnQgYnkgZ3JvdXBzIG9mIGZvdXIuXHJcbiAqIEBwYXJhbSB1aW50OEFycmF5IEl0cyBsZW5ndGggaGFzIHRvIGJlIGEgbXVsdGlwbGUgb2YgNFxyXG4gKiBAcmV0dXJucyB7VWludDMyQXJyYXl9XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdWludDhBcnJheVRvVWludDMyQXJyYXkodWludDhBcnJheTogVWludDhBcnJheSk6IFVpbnQzMkFycmF5IHtcclxuICBjb25zdCBsZW46IG51bWJlciA9IHVpbnQ4QXJyYXkubGVuZ3RoO1xyXG4gIGlmIChsZW4gJSA0ICE9PSAwKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1aW50OEFycmF5Lmxlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNFwiKTtcclxuICB9XHJcbiAgY29uc3QgdWludDMyQXJyYXk6IFVpbnQzMkFycmF5ID0gbmV3IFVpbnQzMkFycmF5KGxlbiAvIDQpO1xyXG4gIGZvciAobGV0IGk6IG51bWJlciA9IDAsIGo6IG51bWJlciA9IDA7IGkgPCBsZW47IGkgKz0gNCwgaisrKSB7XHJcbiAgICB1aW50MzJBcnJheVtqXSArPSB1aW50OEFycmF5W2ldICogKDEgPDwgMCk7XHJcbiAgICB1aW50MzJBcnJheVtqXSArPSB1aW50OEFycmF5W2kgKyAxXSAqICgxIDw8IDgpO1xyXG4gICAgdWludDMyQXJyYXlbal0gKz0gdWludDhBcnJheVtpICsgMl0gKiAoMSA8PCAxNik7XHJcbiAgICB1aW50MzJBcnJheVtqXSArPSB1aW50OEFycmF5W2kgKyAzXSAqICgxIDw8IDI0KTtcclxuICB9XHJcbiAgcmV0dXJuIHVpbnQzMkFycmF5O1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIHplcm8tcGFkZGVkICg4IGNoYXJzIGxvbmcpIGhleC1zdHJpbmcgb2YgdGhlIGxpdHRsZS1lbmRpYW4gcmVwcmVzZW50YXRpb24gdGhlIGFyZ3VtZW50LlxyXG4gKlxyXG4gKiBUaGUgcmVsYXRpb24gYmV0d2VlbiB0aGUgY2hhcmFjdGVycyBvZiBgLnRvU3RyaW5nKDE2KWAgKGJpZy1lbmRpYW4pIGlzOlxyXG4gKiAudG9TdHJpbmcoMTYpOiAgICAgICAgICAgICAgICA8NzY1NDMyMTA+XHJcbiAqIGludDMyVG9MaXR0bGVFbmRpYW5IZXhTdHJpbmc6IDwxMDMyNTQ3Nj5cclxuICpcclxuICogRXhhbXBsZTpcclxuICogLnRvU3RyaW5nKDE2KTogICAgICAgICAgICAgICAgZWQ4MWMxNWFcclxuICogaW50MzJUb0xpdHRsZUVuZGlhbkhleFN0cmluZzogNWFjMTgxZWRcclxuICpcclxuICogQHBhcmFtIGludDMyXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaW50MzJUb0xpdHRsZUVuZGlhbkhleFN0cmluZyhpbnQzMjogbnVtYmVyKTogc3RyaW5nIHtcclxuICBsZXQgcmVzdWx0OiBzdHJpbmcgPSBcIlwiO1xyXG4gIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCA0OyBpKyspIHtcclxuICAgIHJlc3VsdCA9IHJlc3VsdCArIEhFWF9DSEFSUy5jaGFyQXQoKGludDMyID4+IGkgKiA4ICsgNCkgJiAxNSk7XHJcbiAgICByZXN1bHQgPSByZXN1bHQgKyBIRVhfQ0hBUlMuY2hhckF0KChpbnQzMiA+PiBpICogOCkgJiAxNSk7XHJcbiAgfVxyXG4gIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtbGluZS1sZW5ndGhcclxuLy8gaHR0cHM6Ly9naXRodWIuY29tL0RlbXVyZ29zL3NreXBlLXdlYi1yZXZlcnNlZC9ibG9iL2ZlMzkzMWM0ZjA5MWFmMDZmNmIyYzJlOGMxNDYwOGFlYmY4NzQ0OGIvc2t5cGUvbGF0ZXN0L2RlY29tcGlsZWQvZnVsbEV4cGVyaWVuY2UvcmpzJTI0JTI0bXNyLWNyeXB0by9saWIvc2hhMjU2QXV0aC5qcyNMNjJcclxuLyoqXHJcbiAqIFJldHVybnMgNjQgYml0cyAoYW4gVWludDMyIGFycmF5IG9mIGxlbmd0aCAyKSBjb21wdXRlZCBmcm9tIHRoZSBjaGFsbGVuZ2VQYXJ0cyBhbmQgaGFzaFBhcnRzLlxyXG4gKiBUaGlzIGlzIHJldHJpZXZlZCBmcm9tIHRoZSBzb3VyY2Ugb2YgU2t5cGUncyB3ZWIgYXBwbGljYXRpb24uXHJcbiAqXHJcbiAqIFNlZSBfY1M2NF9DIGluIHNoYTI1NkF1dGguanMgYXQgc2t5cGUtd2ViLXJldmVyc2VkIGZvciB0aGUgb3JpZ2luYWwgaW1wbGVtZW50YXRpb246XHJcbiAqXHJcbiAqIEBwYXJhbSBjaGFsbGVuZ2VQYXJ0c1xyXG4gKiBAcGFyYW0gaGFzaFBhcnRzIEFuIFVpbnQzMkFycmF5IG9mIGxlbmd0aCA0XHJcbiAqIEByZXR1cm5zIHtudWxsfVxyXG4gKi9cclxuZnVuY3Rpb24gY2hlY2tTdW02NChjaGFsbGVuZ2VQYXJ0czogVWludDMyQXJyYXksIGhhc2hQYXJ0czogVWludDMyQXJyYXkpOiBVaW50MzJBcnJheSB7XHJcbiAgaWYgKGNoYWxsZW5nZVBhcnRzLmxlbmd0aCA8IDIgfHwgY2hhbGxlbmdlUGFydHMubGVuZ3RoICUgMiAhPT0gMCkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBwYXJhbWV0ZXJzXCIpO1xyXG4gIH1cclxuICBjb25zdCBNQUdJQzogbnVtYmVyID0gMHgwZTc5YTljMTsgLy8gQSBtYWdpYyBjb25zdGFudFxyXG4gIGNvbnN0IEhBU0hfMDogbnVtYmVyID0gaGFzaFBhcnRzWzBdICYgTUFYX0lOVDMyOyAvLyBSZW1vdmUgdGhlIHNpZ24gYml0XHJcbiAgY29uc3QgSEFTSF8xOiBudW1iZXIgPSBoYXNoUGFydHNbMV0gJiBNQVhfSU5UMzI7XHJcbiAgY29uc3QgSEFTSF8yOiBudW1iZXIgPSBoYXNoUGFydHNbMl0gJiBNQVhfSU5UMzI7XHJcbiAgY29uc3QgSEFTSF8zOiBudW1iZXIgPSBoYXNoUGFydHNbM10gJiBNQVhfSU5UMzI7XHJcblxyXG4gIGxldCBsb3c6IGJpZ0ludC5CaWdJbnQgPSBiaWdJbnQuemVybzsgLy8gMC0zMSBiaXRzIG9mIHRoZSByZXN1bHRcclxuICBsZXQgaGlnaDogYmlnSW50LkJpZ0ludCA9IGJpZ0ludC56ZXJvOyAvLyAzMi02MyBiaXRzIG9mIHRoZSByZXN1bHRcclxuICBsZXQgdGVtcDogYmlnSW50LkJpZ0ludDtcclxuXHJcbiAgY29uc3QgbGVuOiBudW1iZXIgPSBjaGFsbGVuZ2VQYXJ0cy5sZW5ndGg7XHJcbiAgZm9yIChsZXQgaTogbnVtYmVyID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XHJcbiAgICB0ZW1wID0gYmlnSW50KGNoYWxsZW5nZVBhcnRzW2ldKS5tdWx0aXBseShNQUdJQykubW9kKE1BWF9JTlQzMik7XHJcbiAgICBsb3cgPSBsb3cuYWRkKHRlbXApLm11bHRpcGx5KEhBU0hfMCkuYWRkKEhBU0hfMSkubW9kKE1BWF9JTlQzMik7XHJcbiAgICBoaWdoID0gaGlnaC5hZGQobG93KTtcclxuXHJcbiAgICB0ZW1wID0gYmlnSW50KGNoYWxsZW5nZVBhcnRzW2kgKyAxXSk7XHJcbiAgICBsb3cgPSBsb3cuYWRkKHRlbXApLm11bHRpcGx5KEhBU0hfMikuYWRkKEhBU0hfMykubW9kKE1BWF9JTlQzMik7XHJcbiAgICBoaWdoID0gaGlnaC5hZGQobG93KTtcclxuICB9XHJcblxyXG4gIGxvdyA9IGxvdy5hZGQoSEFTSF8xKS5tb2QoTUFYX0lOVDMyKTtcclxuICBoaWdoID0gaGlnaC5hZGQoSEFTSF8zKS5tb2QoTUFYX0lOVDMyKTtcclxuXHJcbiAgcmV0dXJuIG5ldyBVaW50MzJBcnJheShbbG93LnRvSlNOdW1iZXIoKSwgaGlnaC50b0pTTnVtYmVyKCldKTtcclxufVxyXG5cclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1saW5lLWxlbmd0aFxyXG4vLyBodHRwczovL2dpdGh1Yi5jb20vRGVtdXJnb3Mvc2t5cGUtd2ViLXJldmVyc2VkL2Jsb2IvZmUzOTMxYzRmMDkxYWYwNmY2YjJjMmU4YzE0NjA4YWViZjg3NDQ4Yi9za3lwZS9sYXRlc3QvZGVjb21waWxlZC9mdWxsRXhwZXJpZW5jZS9yanMkJG1zci1jcnlwdG8vbGliL3NoYTI1NkF1dGguanMjTDQ4XHJcbi8qKlxyXG4gKiBUaGlzIGNvbXB1dGVzIHRoZSBIYXNoLWJhc2VkIG1lc3NhZ2UgYXV0aGVudGljYXRpb24gY29kZSAoSE1BQykgb2YgdGhlIGlucHV0IGJ1ZmZlciBieSB1c2luZ1xyXG4gKiBTSEEtMjU2IGFuZCB0aGUgY2hlY2tTdW02NCBmdW5jdGlvbi5cclxuICogVGhpcyBpcyByZXRyaWV2ZWQgZnJvbSB0aGUgc291cmNlIG9mIFNreXBlJ3Mgd2ViIGFwcGxpY2F0aW9uLlxyXG4gKlxyXG4gKiBTZWUgZ2V0TWFjSGFzaCBpbiBzaGEyNTZBdXRoLmpzIGF0IHNreXBlLXdlYi1yZXZlcnNlZCBmb3IgdGhlIG9yaWdpbmFsIGltcGxlbWVudGF0aW9uXHJcbiAqIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtbGluZS1sZW5ndGhcclxuICpcclxuICogQHBhcmFtIGlucHV0XHJcbiAqIEBwYXJhbSBwcm9kdWN0SWRcclxuICogQHBhcmFtIHByb2R1Y3RLZXlcclxuICogQHJldHVybnMge3N0cmluZ30gQW4gaGV4YWRlY2ltYWwgMzItY2hhcnMgbG9uZyBzdHJpbmdcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBobWFjU2hhMjU2KGlucHV0OiBCdWZmZXIsIHByb2R1Y3RJZDogQnVmZmVyLCBwcm9kdWN0S2V5OiBCdWZmZXIpOiBzdHJpbmcge1xyXG4gIGxldCBtZXNzYWdlOiBCdWZmZXIgPSBCdWZmZXIuY29uY2F0KFtpbnB1dCwgcHJvZHVjdElkXSk7XHJcbiAgLy8gYWRqdXN0IGxlbmd0aCB0byBiZSBhIG11bHRpcGxlIG9mIDggd2l0aCByaWdodC1wYWRkaW5nIG9mIGNoYXJhY3RlciAnMCdcclxuICBpZiAobWVzc2FnZS5sZW5ndGggJSA4ICE9PSAwKSB7XHJcbiAgICBjb25zdCBmaXg6IG51bWJlciA9IDggLSAobWVzc2FnZS5sZW5ndGggJSA4KTtcclxuICAgIGNvbnN0IHBhZGRpbmc6IEJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyhmaXgsIFwiMFwiLCBcInV0ZjhcIik7XHJcbiAgICBwYWRkaW5nLmZpbGwoXCIwXCIpO1xyXG4gICAgbWVzc2FnZSA9IEJ1ZmZlci5jb25jYXQoW21lc3NhZ2UsIHBhZGRpbmddKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IGNoYWxsZW5nZVBhcnRzOiBVaW50MzJBcnJheSA9IHVpbnQ4QXJyYXlUb1VpbnQzMkFycmF5KG1lc3NhZ2UpO1xyXG5cclxuICBjb25zdCBzaGEyNTZIZXhTdHJpbmc6IHN0cmluZyA9IHNoYTI1NihCdWZmZXIuY29uY2F0KFtpbnB1dCwgcHJvZHVjdEtleV0pKTtcclxuICBjb25zdCBzaGEyNTZCdWZmZXI6IEJ1ZmZlciA9IEJ1ZmZlci5mcm9tKHNoYTI1NkhleFN0cmluZywgXCJoZXhcIik7XHJcblxyXG4gIC8vIEdldCBoYWxmIG9mIHRoZSBzaGEyNTYgYXMgNCB1aW50MzJcclxuICBjb25zdCBzaGEyNTZQYXJ0czogVWludDMyQXJyYXkgPSB1aW50OEFycmF5VG9VaW50MzJBcnJheShzaGEyNTZCdWZmZXIuc2xpY2UoMCwgMTYpKTtcclxuXHJcbiAgY29uc3QgY2hlY2tTdW1QYXJ0czogVWludDMyQXJyYXkgPSBjaGVja1N1bTY0KGNoYWxsZW5nZVBhcnRzLCBzaGEyNTZQYXJ0cyk7XHJcblxyXG4gIHNoYTI1NlBhcnRzWzBdIF49IGNoZWNrU3VtUGFydHNbMF07XHJcbiAgc2hhMjU2UGFydHNbMV0gXj0gY2hlY2tTdW1QYXJ0c1sxXTtcclxuICBzaGEyNTZQYXJ0c1syXSBePSBjaGVja1N1bVBhcnRzWzBdO1xyXG4gIHNoYTI1NlBhcnRzWzNdIF49IGNoZWNrU3VtUGFydHNbMV07XHJcblxyXG4gIHJldHVybiBpbnQzMlRvTGl0dGxlRW5kaWFuSGV4U3RyaW5nKHNoYTI1NlBhcnRzWzBdKVxyXG4gICAgKyBpbnQzMlRvTGl0dGxlRW5kaWFuSGV4U3RyaW5nKHNoYTI1NlBhcnRzWzFdKVxyXG4gICAgKyBpbnQzMlRvTGl0dGxlRW5kaWFuSGV4U3RyaW5nKHNoYTI1NlBhcnRzWzJdKVxyXG4gICAgKyBpbnQzMlRvTGl0dGxlRW5kaWFuSGV4U3RyaW5nKHNoYTI1NlBhcnRzWzNdKTtcclxufVxyXG4iXX0=
