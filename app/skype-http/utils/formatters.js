"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var incident_1 = require("incident");
var _ = require("lodash");
var user_data_processor_1 = require("./user-data-processor");
function formatConversation(native) {
    // TODO: parse id
    if (native.id.indexOf("19:") === 0) {
        return native;
    }
    else {
        var contact = native.id;
        var result = native;
        result.members = [contact];
        return result;
    }
}
exports.formatConversation = formatConversation;
function formatThread(native) {
    var memberIds = _.map(native.members, (function (member) { return member.id; }));
    var properties = {};
    if ("properties" in native) {
        if ("topic" in native.properties) {
            properties.topic = native.properties.topic;
        }
        if ("lastjoinat" in native.properties) {
            properties.topic = native.properties.lastjoinat;
        }
        if ("version" in native.properties) {
            properties.topic = native.properties.version;
        }
    }
    return {
        threadProperties: properties,
        id: native.id,
        type: native.type,
        version: native.version,
        members: memberIds
    };
}
exports.formatThread = formatThread;
function formatContact(native) {
    return contactToPerson(native);
}
exports.formatContact = formatContact;
// github:demurgos/skype-web-reversed -> jSkype/modelHelpers/contacts/dataMappers/agentToPerson.js
function agentToPerson(native) {
}
// TODO: check that the uri uses the HTTPS protocol
function ensureHttps(uri) {
    return uri;
}
function define() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return null;
}
// github:demurgos/skype-web-reversed -> jSkype/modelHelpers/contacts/dataMappers/contactToPerson.js
function contactToPerson(native) {
    var SUGGESTED_CONTACT_ACTIVITY_MESSAGE = "Skype";
    // TODO(demurgos): typedef
    // tslint:disable-next-line:typedef
    var authorizationStates = {
        UNKNOWN: "UNKNOWN",
        UNAUTHORIZED: "UNAUTHORIZED",
        PENDING_OUTGOING: "PENDING_OUTGOING",
        PENDING_INCOMING: "PENDING_INCOMING",
        AUTHORIZED: "AUTHORIZED",
        SUGGESTED: "SUGGESTED"
    };
    // TODO(demurgos): typedef
    // tslint:disable-next-line:typedef
    var showStrategies = {
        ALL: "ALL",
        AVAILABLE_ONLY: "AVAILABLE_ONLY",
        AGENTS_ONLY: "AGENTS_ONLY"
    };
    var activityMessage;
    if (native.suggested === true) {
        activityMessage = SUGGESTED_CONTACT_ACTIVITY_MESSAGE;
    }
    else {
        activityMessage = native.mood === undefined ? null : native.mood;
    }
    var capabilities;
    if (native.type === "agent") {
        capabilities = native.agent.capabilities;
    }
    else if (native.type === "pstn") {
        capabilities = ["audio.receive", "group.add"];
    }
    else {
        capabilities = [];
    }
    var authorizationState;
    if (native.authorized) {
        authorizationState = authorizationStates.AUTHORIZED;
    }
    else if (native.suggested) {
        authorizationState = authorizationStates.SUGGESTED;
    }
    else {
        authorizationState = authorizationStates.PENDING_OUTGOING;
    }
    var typeKey = contactTypeNameToContactTypeKey(native.type);
    var isAgent = native.type === "agent";
    var avatarUrl;
    if (native.avatar_url) {
        avatarUrl = ensureHttps(native.avatar_url);
        // TODO: ensure that the "cacheHeaders=1" queryString is there
    }
    else {
        avatarUrl = null;
    }
    var displayName = user_data_processor_1.sanitizeXml(native.display_name);
    var firstName = user_data_processor_1.sanitizeXml(native.name.first);
    var lastName = native.name.surname === undefined ? null : user_data_processor_1.sanitizeXml(native.name.surname);
    var phoneNumbers = [];
    var locations = [];
    var result;
    result = {
        id: {
            id: native.id,
            typeKey: typeKey,
            typeName: native.type,
            raw: typeKey + ":" + native.id
        },
        avatarUrl: avatarUrl,
        phones: phoneNumbers,
        name: {
            first: firstName,
            surname: "",
            nickname: native.id
        },
        activityMessage: activityMessage,
        locations: locations
    };
    return result;
}
// github:demurgos/skype-web-reversed -> jSkype/modelHelpers/contacts/dataMappers/dataMaps.js
function contactTypeNameToContactTypeKey(typeName) {
    switch (typeName) {
        case "msn": return "1";
        case "lync": return "2";
        case "pstn": return "4"; // Public switched telephone network
        case "skype": return "8";
        case "agent": return "28";
        default: throw new incident_1.Incident("unknown-contact-type-name", { typeName: typeName }, "Unknwon contact type name " + typeName);
    }
}
// github:demurgos/skype-web-reversed -> jSkype/modelHelpers/contacts/dataMappers/dataMaps.js
function contactTypeKeyToContactTypeName(typeKey) {
    switch (typeKey) {
        case "1": return "msn";
        case "2": return "lync";
        case "4": return "pstn"; // Public switched telephone network
        case "8": return "skype";
        case "28": return "agent";
        default: throw new incident_1.Incident("unknown-contact-type-key", { typeCode: typeKey }, "Unknwon contact type key " + typeKey);
    }
}
// github:demurgos/skype-web-reversed -> jSkype/modelHelpers/contacts/dataMappers/dataMaps.js
function phoneTypeNameToPhoneTypeKey(typeName) {
    switch (typeName) {
        case "Home": return "0";
        case "Work": return "1";
        case "Cell": return "2";
        case "Other": return "3";
        default: throw new incident_1.Incident("unknown-phone-type-name", { typeName: typeName }, "Unknwon phone type name " + typeName);
    }
}
// github:demurgos/skype-web-reversed -> jSkype/modelHelpers/contacts/dataMappers/dataMaps.js
function phoneTypeKeyToPhoneTypeName(typeKey) {
    switch (typeKey) {
        case "0": return "Home";
        case "1": return "Work";
        case "2": return "Cell";
        case "3": return "Other";
        default: throw new incident_1.Incident("unknown-phone-type-key", { typeCode: typeKey }, "Unknwon phone type key " + typeKey);
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
