"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Bluebird = require("bluebird");
var incident_1 = require("incident");
var apiUri = require("../api-uri");
exports.VIRTUAL_CONTACTS = new Set(["concierge", "echo123"]);
function getContact(io, apiContext, contactId) {
    return Bluebird
        .try(function () {
        if (exports.VIRTUAL_CONTACTS.has(contactId)) {
            // tslint:disable-next-line:max-line-length
            throw new Error(JSON.stringify(contactId) + " is not a real contact, you cannot get data for " + JSON.stringify(contactId));
        }
        // concierge
        console.log("Getting contact: " + contactId);
        var requestOptions = {
            uri: apiUri.userProfile(contactId),
            jar: apiContext.cookieJar,
            headers: {
                "X-Skypetoken": apiContext.skypeToken.value
            }
        };
        return io.get(requestOptions);
    })
        .then(function (res) {
        console.log("Response for contact " + JSON.stringify(contactId) + ":");
        console.log(res);
        if (res.statusCode !== 200) {
            return Bluebird.reject(new incident_1.Incident("net", "Unable to fetch contact"));
        }
        var body = JSON.parse(res.body);
        return body;
    });
}
exports.getContact = getContact;
exports.default = getContact;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9hcGkvZ2V0LWNvbnRhY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtQ0FBcUM7QUFDckMscUNBQWtDO0FBQ2xDLG1DQUFxQztBQUt4QixRQUFBLGdCQUFnQixHQUFnQixJQUFJLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO0FBRS9FLG9CQUE0QixFQUFhLEVBQUUsVUFBbUIsRUFBRSxTQUFpQjtJQUMvRSxNQUFNLENBQUMsUUFBUTtTQUNaLEdBQUcsQ0FBQztRQUNILEVBQUUsQ0FBQyxDQUFDLHdCQUFnQixDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEMsMkNBQTJDO1lBQzNDLE1BQU0sSUFBSSxLQUFLLENBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsd0RBQW1ELElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFHLENBQUMsQ0FBQztRQUM5SCxDQUFDO1FBQ0QsWUFBWTtRQUNaLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQW9CLFNBQVcsQ0FBQyxDQUFDO1FBQzdDLElBQU0sY0FBYyxHQUFrQjtZQUNwQyxHQUFHLEVBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUM7WUFDbEMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxTQUFTO1lBQ3pCLE9BQU8sRUFBRTtnQkFDUCxjQUFjLEVBQUUsVUFBVSxDQUFDLFVBQVUsQ0FBQyxLQUFLO2FBQzVDO1NBQ0YsQ0FBQztRQUNGLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ2hDLENBQUMsQ0FBQztTQUNELElBQUksQ0FBQyxVQUFDLEdBQWdCO1FBQ3JCLE9BQU8sQ0FBQyxHQUFHLENBQUMsMEJBQXdCLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQUcsQ0FBQyxDQUFDO1FBQ2xFLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakIsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzNCLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksbUJBQVEsQ0FBQyxLQUFLLEVBQUUseUJBQXlCLENBQUMsQ0FBQyxDQUFDO1FBQ3pFLENBQUM7UUFDRCxJQUFNLElBQUksR0FBWSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzQyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2QsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBM0JELGdDQTJCQztBQUVELGtCQUFlLFVBQVUsQ0FBQyIsImZpbGUiOiJsaWIvYXBpL2dldC1jb250YWN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQmx1ZWJpcmQgZnJvbSBcImJsdWViaXJkXCI7XHJcbmltcG9ydCB7SW5jaWRlbnR9IGZyb20gXCJpbmNpZGVudFwiO1xyXG5pbXBvcnQgKiBhcyBhcGlVcmkgZnJvbSBcIi4uL2FwaS11cmlcIjtcclxuaW1wb3J0IHtDb250YWN0fSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9hcGkvY29udGFjdFwiO1xyXG5pbXBvcnQge0NvbnRleHR9IGZyb20gXCIuLi9pbnRlcmZhY2VzL2FwaS9jb250ZXh0XCI7XHJcbmltcG9ydCAqIGFzIGlvIGZyb20gXCIuLi9pbnRlcmZhY2VzL2lvXCI7XHJcblxyXG5leHBvcnQgY29uc3QgVklSVFVBTF9DT05UQUNUUzogU2V0PHN0cmluZz4gPSBuZXcgU2V0KFtcImNvbmNpZXJnZVwiLCBcImVjaG8xMjNcIl0pO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbnRhY3QgKGlvOiBpby5IdHRwSW8sIGFwaUNvbnRleHQ6IENvbnRleHQsIGNvbnRhY3RJZDogc3RyaW5nKTogQmx1ZWJpcmQ8Q29udGFjdD4ge1xyXG4gIHJldHVybiBCbHVlYmlyZFxyXG4gICAgLnRyeSgoKSA9PiB7XHJcbiAgICAgIGlmIChWSVJUVUFMX0NPTlRBQ1RTLmhhcyhjb250YWN0SWQpKSB7XHJcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1saW5lLWxlbmd0aFxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtKU09OLnN0cmluZ2lmeShjb250YWN0SWQpfSBpcyBub3QgYSByZWFsIGNvbnRhY3QsIHlvdSBjYW5ub3QgZ2V0IGRhdGEgZm9yICR7SlNPTi5zdHJpbmdpZnkoY29udGFjdElkKX1gKTtcclxuICAgICAgfVxyXG4gICAgICAvLyBjb25jaWVyZ2VcclxuICAgICAgY29uc29sZS5sb2coYEdldHRpbmcgY29udGFjdDogJHtjb250YWN0SWR9YCk7XHJcbiAgICAgIGNvbnN0IHJlcXVlc3RPcHRpb25zOiBpby5HZXRPcHRpb25zID0ge1xyXG4gICAgICAgIHVyaTogYXBpVXJpLnVzZXJQcm9maWxlKGNvbnRhY3RJZCksXHJcbiAgICAgICAgamFyOiBhcGlDb250ZXh0LmNvb2tpZUphcixcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICBcIlgtU2t5cGV0b2tlblwiOiBhcGlDb250ZXh0LnNreXBlVG9rZW4udmFsdWVcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICAgIHJldHVybiBpby5nZXQocmVxdWVzdE9wdGlvbnMpO1xyXG4gICAgfSlcclxuICAgIC50aGVuKChyZXM6IGlvLlJlc3BvbnNlKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGBSZXNwb25zZSBmb3IgY29udGFjdCAke0pTT04uc3RyaW5naWZ5KGNvbnRhY3RJZCl9OmApO1xyXG4gICAgICBjb25zb2xlLmxvZyhyZXMpO1xyXG4gICAgICBpZiAocmVzLnN0YXR1c0NvZGUgIT09IDIwMCkge1xyXG4gICAgICAgIHJldHVybiBCbHVlYmlyZC5yZWplY3QobmV3IEluY2lkZW50KFwibmV0XCIsIFwiVW5hYmxlIHRvIGZldGNoIGNvbnRhY3RcIikpO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IGJvZHk6IENvbnRhY3QgPSBKU09OLnBhcnNlKHJlcy5ib2R5KTtcclxuICAgICAgcmV0dXJuIGJvZHk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZ2V0Q29udGFjdDtcclxuIl19
