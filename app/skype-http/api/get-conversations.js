"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Bluebird = require("bluebird");
var incident_1 = require("incident");
var _ = require("lodash");
var messagesUri = require("../messages-uri");
var formatters_1 = require("../utils/formatters");
function getConversations(io, apiContext) {
    return Bluebird
        .try(function () {
        var query = {
            startTime: 0,
            view: "msnp24Equivalent",
            targetType: "Passport|Skype|Lync|Thread"
        };
        var requestOptions = {
            uri: messagesUri.conversations(apiContext.registrationToken.host, messagesUri.DEFAULT_USER),
            jar: apiContext.cookieJar,
            queryString: query,
            headers: {
                RegistrationToken: apiContext.registrationToken.raw
            }
        };
        return io.get(requestOptions);
    })
        .then(function (res) {
        if (res.statusCode !== 200) {
            return Bluebird.reject(new incident_1.Incident("net", "Unable to fetch conversations"));
        }
        var body = JSON.parse(res.body);
        return _.map(body.conversations, formatters_1.formatConversation);
    });
}
exports.getConversations = getConversations;
exports.default = getConversations;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9hcGkvZ2V0LWNvbnZlcnNhdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtQ0FBcUM7QUFDckMscUNBQWtDO0FBQ2xDLDBCQUE0QjtBQUs1Qiw2Q0FBK0M7QUFDL0Msa0RBQXVEO0FBa0J2RCwwQkFBa0MsRUFBYSxFQUFFLFVBQW1CO0lBQ2xFLE1BQU0sQ0FBQyxRQUFRO1NBQ1osR0FBRyxDQUFDO1FBQ0gsSUFBTSxLQUFLLEdBQTBCO1lBQ25DLFNBQVMsRUFBRSxDQUFDO1lBQ1osSUFBSSxFQUFFLGtCQUFrQjtZQUN4QixVQUFVLEVBQUUsNEJBQTRCO1NBQ3pDLENBQUM7UUFFRixJQUFNLGNBQWMsR0FBa0I7WUFDcEMsR0FBRyxFQUFFLFdBQVcsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsWUFBWSxDQUFDO1lBQzNGLEdBQUcsRUFBRSxVQUFVLENBQUMsU0FBUztZQUN6QixXQUFXLEVBQUUsS0FBSztZQUNsQixPQUFPLEVBQUU7Z0JBQ1AsaUJBQWlCLEVBQUUsVUFBVSxDQUFDLGlCQUFpQixDQUFDLEdBQUc7YUFDcEQ7U0FDRixDQUFDO1FBQ0YsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDaEMsQ0FBQyxDQUFDO1NBQ0QsSUFBSSxDQUFDLFVBQUMsR0FBZ0I7UUFDckIsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzNCLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksbUJBQVEsQ0FBQyxLQUFLLEVBQUUsK0JBQStCLENBQUMsQ0FBQyxDQUFDO1FBQy9FLENBQUM7UUFDRCxJQUFNLElBQUksR0FBc0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckQsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSwrQkFBa0IsQ0FBQyxDQUFDO0lBQ3ZELENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQTFCRCw0Q0EwQkM7QUFFRCxrQkFBZSxnQkFBZ0IsQ0FBQyIsImZpbGUiOiJsaWIvYXBpL2dldC1jb252ZXJzYXRpb25zLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQmx1ZWJpcmQgZnJvbSBcImJsdWViaXJkXCI7XHJcbmltcG9ydCB7SW5jaWRlbnR9IGZyb20gXCJpbmNpZGVudFwiO1xyXG5pbXBvcnQgKiBhcyBfIGZyb20gXCJsb2Rhc2hcIjtcclxuaW1wb3J0IHtDb250ZXh0fSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9hcGkvY29udGV4dFwiO1xyXG5pbXBvcnQge0NvbnZlcnNhdGlvbn0gZnJvbSBcIi4uL2ludGVyZmFjZXMvYXBpL2NvbnZlcnNhdGlvblwiO1xyXG5pbXBvcnQgKiBhcyBpbyBmcm9tIFwiLi4vaW50ZXJmYWNlcy9pb1wiO1xyXG5pbXBvcnQge0NvbnZlcnNhdGlvbiBhcyBOYXRpdmVDb252ZXJzYXRpb259IGZyb20gXCIuLi9pbnRlcmZhY2VzL25hdGl2ZS1hcGkvY29udmVyc2F0aW9uXCI7XHJcbmltcG9ydCAqIGFzIG1lc3NhZ2VzVXJpIGZyb20gXCIuLi9tZXNzYWdlcy11cmlcIjtcclxuaW1wb3J0IHtmb3JtYXRDb252ZXJzYXRpb259IGZyb20gXCIuLi91dGlscy9mb3JtYXR0ZXJzXCI7XHJcblxyXG5pbnRlcmZhY2UgQ29udmVyc2F0aW9uc0JvZHkge1xyXG4gIGNvbnZlcnNhdGlvbnM6IE5hdGl2ZUNvbnZlcnNhdGlvbltdO1xyXG4gIF9tZXRhZGF0YToge1xyXG4gICAgdG90YWxDb3VudDogbnVtYmVyO1xyXG4gICAgZm9yd2FyZExpbms6IHN0cmluZzsgLy8gdXJsXHJcbiAgICBiYWNrd2FyZExpbms6IHN0cmluZzsgLy8gdXJsXHJcbiAgICBzeW5jU3RhdGU6IHN0cmluZzsgLy8gdXJsXHJcbiAgfTtcclxufVxyXG5cclxuaW50ZXJmYWNlIEdldENvbnZlcnNhdGlvbnNRdWVyeSB7XHJcbiAgc3RhcnRUaW1lOiBudW1iZXI7IC8vIGEgdGltZXN0YW1wID9cclxuICB2aWV3OiBcIm1zbnAyNEVxdWl2YWxlbnRcIiB8IHN0cmluZztcclxuICB0YXJnZXRUeXBlOiBzdHJpbmc7IC8vIHNlZW46IFBhc3Nwb3J0fFNreXBlfEx5bmN8VGhyZWFkXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRDb252ZXJzYXRpb25zIChpbzogaW8uSHR0cElvLCBhcGlDb250ZXh0OiBDb250ZXh0KTogQmx1ZWJpcmQ8Q29udmVyc2F0aW9uW10+IHtcclxuICByZXR1cm4gQmx1ZWJpcmRcclxuICAgIC50cnkoKCkgPT4ge1xyXG4gICAgICBjb25zdCBxdWVyeTogR2V0Q29udmVyc2F0aW9uc1F1ZXJ5ID0ge1xyXG4gICAgICAgIHN0YXJ0VGltZTogMCxcclxuICAgICAgICB2aWV3OiBcIm1zbnAyNEVxdWl2YWxlbnRcIixcclxuICAgICAgICB0YXJnZXRUeXBlOiBcIlBhc3Nwb3J0fFNreXBlfEx5bmN8VGhyZWFkXCJcclxuICAgICAgfTtcclxuXHJcbiAgICAgIGNvbnN0IHJlcXVlc3RPcHRpb25zOiBpby5HZXRPcHRpb25zID0ge1xyXG4gICAgICAgIHVyaTogbWVzc2FnZXNVcmkuY29udmVyc2F0aW9ucyhhcGlDb250ZXh0LnJlZ2lzdHJhdGlvblRva2VuLmhvc3QsIG1lc3NhZ2VzVXJpLkRFRkFVTFRfVVNFUiksXHJcbiAgICAgICAgamFyOiBhcGlDb250ZXh0LmNvb2tpZUphcixcclxuICAgICAgICBxdWVyeVN0cmluZzogcXVlcnksXHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgUmVnaXN0cmF0aW9uVG9rZW46IGFwaUNvbnRleHQucmVnaXN0cmF0aW9uVG9rZW4ucmF3XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgICByZXR1cm4gaW8uZ2V0KHJlcXVlc3RPcHRpb25zKTtcclxuICAgIH0pXHJcbiAgICAudGhlbigocmVzOiBpby5SZXNwb25zZSkgPT4ge1xyXG4gICAgICBpZiAocmVzLnN0YXR1c0NvZGUgIT09IDIwMCkge1xyXG4gICAgICAgIHJldHVybiBCbHVlYmlyZC5yZWplY3QobmV3IEluY2lkZW50KFwibmV0XCIsIFwiVW5hYmxlIHRvIGZldGNoIGNvbnZlcnNhdGlvbnNcIikpO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IGJvZHk6IENvbnZlcnNhdGlvbnNCb2R5ID0gSlNPTi5wYXJzZShyZXMuYm9keSk7XHJcbiAgICAgIHJldHVybiBfLm1hcChib2R5LmNvbnZlcnNhdGlvbnMsIGZvcm1hdENvbnZlcnNhdGlvbik7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZ2V0Q29udmVyc2F0aW9ucztcclxuIl19
