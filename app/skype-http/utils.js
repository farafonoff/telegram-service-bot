"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
/**
 * Returns the number of seconds since epoch.
 *
 * @returns {number}
 */
function getCurrentTime() {
    return Math.floor((new Date().getTime()) / 1000);
}
exports.getCurrentTime = getCurrentTime;
/**
 * Adds zeros to the left of the string representation of number until its length is equal to len.
 * @param number
 * @param len
 * @returns {string}
 */
function zeroPad(number, len) {
    return padLeft(number, len, "0");
}
exports.zeroPad = zeroPad;
function padLeft(str, len, char) {
    if (char === void 0) { char = " "; }
    var result = String(str);
    var missing = len - result.length;
    if (missing > 0) {
        result = stringFromChar(char, missing) + str;
    }
    return result;
}
exports.padLeft = padLeft;
function padRight(str, len, char) {
    if (char === void 0) { char = " "; }
    var result = String(str);
    var missing = len - result.length;
    if (missing > 0) {
        result = str + stringFromChar(char, missing);
    }
    return result;
}
exports.padRight = padRight;
function stringFromChar(char, count) {
    // TODO: count+1 ?
    return new Array(count - 1).join(char);
}
exports.stringFromChar = stringFromChar;
function getTimezone() {
    var sign;
    var timezone = (new Date()).getTimezoneOffset() * (-1);
    if (timezone >= 0) {
        sign = "+";
    }
    else {
        sign = "-";
    }
    var absTmezone = Math.abs(timezone);
    var minutes = absTmezone % 60;
    var hours = (absTmezone - minutes) / 60;
    return "" + sign + zeroPad(hours, 2) + "|" + zeroPad(minutes, 2);
}
exports.getTimezone = getTimezone;
var HTTP_HEADER_SEPARATOR = ";";
var HTTP_HEADER_OPERATOR = "=";
function stringifyHeaderParams(params) {
    var headerPairs = _.map(params, function (value, key) {
        if (value === undefined) {
            throw new Error("Undefined value for the header: " + key);
        }
        return key.replace(/%20/gm, "+") + "=" + value.replace(/%20/gm, "+");
    });
    // The space after the separator is important, otherwise Skype is unable to parse the header
    return headerPairs.join(HTTP_HEADER_SEPARATOR + " ");
}
exports.stringifyHeaderParams = stringifyHeaderParams;
// TODO: check with skype-web-reversed
function parseHeaderParams(params) {
    var result = {};
    params
        .split(HTTP_HEADER_SEPARATOR)
        .forEach(function (paramString) {
        paramString = _.trim(paramString);
        var operatorIdx = paramString.indexOf(HTTP_HEADER_OPERATOR);
        var key;
        var val;
        // Ensure that the operator is not at the start or end of the parameters string
        if (1 <= operatorIdx && operatorIdx + HTTP_HEADER_OPERATOR.length < paramString.length - 1) {
            key = _.trim(paramString.substring(0, operatorIdx));
            val = _.trim(paramString.substring(operatorIdx + HTTP_HEADER_OPERATOR.length));
        }
        else {
            key = val = _.trim(paramString);
        }
        if (key.length > 0) {
            result[key] = val;
        }
    });
    return result;
}
exports.parseHeaderParams = parseHeaderParams;
var hmac_sha256_1 = require("./utils/hmac-sha256");
exports.getHMAC128 = hmac_sha256_1.hmacSha256;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
