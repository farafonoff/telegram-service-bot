"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var incident_1 = require("incident");
var path_1 = require("path");
var url_1 = require("url");
exports.DEFAULT_USER = "ME";
exports.DEFAULT_ENDPOINT = "SELF";
var CONVERSATION_PATTERN = /^\/v1\/users\/([^/]+)\/conversations\/([^/]+)$/;
var CONTACT_PATTERN = /^\/v1\/users\/([^/]+)\/contacts\/([^/]+)$/;
var MESSAGES_PATTERN = /^\/v1\/users\/([^/]+)\/conversations\/([^/]+)\/messages$/;
function joinPath(parts) {
    return path_1.posix.join.apply(null, parts);
}
// The following functions build an array of parts to build the path
// /v1
function buildV1() {
    return ["v1"];
}
// /v1/threads
function buildThreads() {
    return buildV1().concat("threads");
}
// /v1/threads/{thread}
function buildThread(thread) {
    return buildThreads().concat(thread);
}
// /v1/users
function buildUsers() {
    return buildV1().concat("users");
}
// /v1/users/{user}
function buildUser(user) {
    return buildUsers().concat(user);
}
// /v1/users/{user}/endpoints
function buildEndpoints(user) {
    return buildUser(user).concat("endpoints");
}
// /v1/users/{user}/endpoints/{endpoint}
function buildEndpoint(user, endpoint) {
    return buildEndpoints(user).concat(endpoint);
}
// /v1/users/{user}/endpoints/{endpoint}/subscriptions
function buildSubscriptions(user, endpoint) {
    return buildEndpoint(user, endpoint).concat("subscriptions");
}
// /v1/users/{user}/endpoints/{endpoint}/subscriptions/{subscription}
function buildSubscription(user, endpoint, subscription) {
    return buildSubscriptions(user, endpoint).concat(String(subscription));
}
// /v1/users/{user}/endpoints/{endpoint}/subscriptions/{subscription}/poll
function buildPoll(user, endpoint, subscription) {
    return buildSubscription(user, endpoint, subscription).concat("poll");
}
// /v1/users/{user}/endpoints/{endpoint}/presenceDocs
function buildEndpointPresenceDocs(user, endpoint) {
    return buildEndpoint(user, endpoint).concat("presenceDocs");
}
// /v1/users/{user}/endpoints/{endpoint}/presenceDocs/endpointMessagingService
function buildEndpointMessagingService(user, endpoint) {
    return buildEndpointPresenceDocs(user, endpoint).concat("endpointMessagingService");
}
// /v1/users/{user}/conversations
function buildConversations(user) {
    return buildUser(user).concat("conversations");
}
// /v1/users/{user}/conversations/{conversation}
function buildConversation(user, conversation) {
    return buildConversations(user).concat(conversation);
}
// /v1/users/{user}/conversations/{conversation}/messages
function buildMessages(user, conversation) {
    return buildConversation(user, conversation).concat("messages");
}
// /v1/users/{user}/presenceDocs
function buildUserPresenceDocs(user) {
    return buildUser(user).concat("presenceDocs");
}
// /v1/users/{user}/presenceDocs/endpointMessagingService
function buildUserMessagingService(user) {
    return buildUserPresenceDocs(user).concat("endpointMessagingService");
}
/**
 * Returns an URI origin like: "https://host.com"
 * If host is `null`, returns an empty string
 */
function getOrigin(host) {
    return host === null ? "" : "https://" + host;
}
function get(host, path) {
    return url_1.resolve(getOrigin(host), path);
}
function thread(host, threadId) {
    return get(host, joinPath(buildThread(threadId)));
}
exports.thread = thread;
function users(host) {
    return get(host, joinPath(buildUsers()));
}
exports.users = users;
function user(host, userId) {
    if (userId === void 0) { userId = exports.DEFAULT_USER; }
    return get(host, joinPath(buildUser(userId)));
}
exports.user = user;
// https://{host}/v1/users/{userId}/endpoints
function endpoints(host, userId) {
    if (userId === void 0) { userId = exports.DEFAULT_USER; }
    return get(host, joinPath(buildEndpoints(userId)));
}
exports.endpoints = endpoints;
function endpoint(host, userId, endpointId) {
    if (userId === void 0) { userId = exports.DEFAULT_USER; }
    if (endpointId === void 0) { endpointId = exports.DEFAULT_ENDPOINT; }
    return get(host, joinPath(buildEndpoint(userId, endpointId)));
}
exports.endpoint = endpoint;
function poll(host, userId, endpointId, subscriptionId) {
    if (userId === void 0) { userId = exports.DEFAULT_USER; }
    if (endpointId === void 0) { endpointId = exports.DEFAULT_ENDPOINT; }
    if (subscriptionId === void 0) { subscriptionId = 0; }
    return get(host, joinPath(buildPoll(userId, endpointId, subscriptionId)));
}
exports.poll = poll;
/**
 * Returns https://{host}/v1/users/{userId}/endpoints/{endpointId}/subscriptions
 * @param host
 * @param userId
 * @param endpointId
 */
function subscriptions(host, userId, endpointId) {
    if (userId === void 0) { userId = exports.DEFAULT_USER; }
    if (endpointId === void 0) { endpointId = exports.DEFAULT_ENDPOINT; }
    return get(host, joinPath(buildSubscriptions(userId, endpointId)));
}
exports.subscriptions = subscriptions;
function conversations(host, user) {
    return get(host, joinPath(buildConversations(user)));
}
exports.conversations = conversations;
function conversation(host, user, conversationId) {
    return get(host, joinPath(buildConversation(user, conversationId)));
}
exports.conversation = conversation;
/**
 * Returns https://{host}/v1/users/{user}/conversations/{conversationId}/messages
 * @param host
 * @param user
 * @param conversationId
 */
function messages(host, user, conversationId) {
    return get(host, joinPath(buildMessages(user, conversationId)));
}
exports.messages = messages;
function userMessagingService(host, user) {
    if (user === void 0) { user = exports.DEFAULT_USER; }
    return get(host, joinPath(buildUserMessagingService(user)));
}
exports.userMessagingService = userMessagingService;
function endpointMessagingService(host, user, endpoint) {
    if (user === void 0) { user = exports.DEFAULT_USER; }
    if (endpoint === void 0) { endpoint = exports.DEFAULT_ENDPOINT; }
    return get(host, joinPath(buildEndpointMessagingService(user, endpoint)));
}
exports.endpointMessagingService = endpointMessagingService;
function parseContact(uri) {
    var parsed = url_1.parse(uri);
    if (parsed.host === undefined || parsed.pathname === undefined) {
        throw new incident_1.Incident("parse-error", "Expected URI to have a host and path");
    }
    var match = CONTACT_PATTERN.exec(parsed.pathname);
    if (match === null) {
        throw new incident_1.Incident("parse-error", "Expected URI to be a conversation uri");
    }
    return {
        host: parsed.host,
        user: match[1],
        contact: match[2]
    };
}
exports.parseContact = parseContact;
function parseConversation(uri) {
    var parsed = url_1.parse(uri);
    if (parsed.host === undefined || parsed.pathname === undefined) {
        throw new incident_1.Incident("parse-error", "Expected URI to have a host and path");
    }
    var match = CONVERSATION_PATTERN.exec(parsed.pathname);
    if (match === null) {
        throw new incident_1.Incident("parse-error", "Expected URI to be a conversation uri");
    }
    return {
        host: parsed.host,
        user: match[1],
        conversation: match[2]
    };
}
exports.parseConversation = parseConversation;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
